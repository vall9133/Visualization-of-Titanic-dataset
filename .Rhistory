"Gender_MF", "Category", "alldeaths", "NDAM")])
print(correlation_matrix)
#4. (5 points) Using the correlation matrix created in question 3 from the 'hurricane.csv' file, generate a
#heatmap in which each cell represents the correlation coefficient values. What is the correlation
#coefficient value between 'MinPressure_before' and 'MinPressure_Updated_2014'?
heatmap(correlation_matrix,
Rowv = NA, Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none",
margins = c(5, 10))
correlation_value <- correlation_matrix["MinPressure_before","Minpressure_Updated.2014"]
print(correlation_value)
#The correleation coefficient value between the given variables is 0.98
closeAllConnections()
rm(list=ls())
wk6_Assign_Akhil <- file("wk6_Assign_Akhil.txt")
sink(wk6_Assign_Akhil,append = TRUE,type = "output")
cat(readChar(rstudioapi::getSourceEditorContext()$path,
file.info(rstudioapi::getSourceEditorContext()$path)$size))
# R package
list.of.packages <- c('ggplot2',"dplyr","maps","ggiraphExtra","plotly","dygraphs","foreign","readxl","xts","tibble","mapproj","corrplot")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) {
install.packages(new.packages, repo='http://cran.at.r-project.org',
dependencies=TRUE)
}
lapply(list.of.packages, library, character.only = TRUE)
#1. (5 points) Load the ggplot2 'mpg' dataset (i.e., ggplot2::mpg). Determine if there's a statistically
#significant difference in highway miles per gallon ('hwy') between two groups in the 'drv' column:
#front-wheel drive ('f') and rear-wheel drive ('r'). Explain your justification using a p-value.
mpg <- as.data.frame(ggplot2::mpg)
mpg_diff <- mpg %>%
filter(drv%in%c("f","r")) %>%
select(drv,hwy)
head(mpg_diff)
table(mpg_diff)
t.test(data = mpg_diff, hwy~drv, var.equal=T)
#A p-value of 1.529e-12, or less than 0.05,
#was obtained from the t-test comparing the highway miles per gallon (hwy) of front-wheel drive ('f')
#and rear-wheel drive ('r') automobiles. The null hypothesis, which contends that
#there is no difference in the two groups' highway miles per gallon, is strongly supported by the low p-value.
#2. (5 points) Load the ggplot2 'economics' dataset (i.e., ggplot2::economics) and determine the
#correlation between personal consumption expenditures (i.e., 'pce') and the personal saving rate (i.e.,
#'psavert'). Is it a positive correlation, negative correlation, or no correlation?
economics <- as.data.frame(ggplot2::economics)
cor.test(economics$pce,economics$psavert)
#It's a negative correlation with the value of -0.79 between two variables.
#3. (5 points) Download and Load the 'hurricane.csv' file from Blackboard. Create a correlation matrix
#with dimensions 7 x 7, considering variables from the dataset (i.e., MasFem, MinPressure_before,
#MinPressure_Updated_2014, Gender_MF, Category, alldeaths, NDAM). Print the correlation matrix.
hurricanes <- read.csv("hurricanes.csv")
head(hurricanes)
hurricanes_data <- hurricanes[,c("MasFem", "MinPressure_before","Minpressure_Updated.2014", "Gender_MF", "Category", "alldeaths", "NDAM")]
correlation_matrix <- cor(hurricanes_data[c("MasFem", "MinPressure_before", "Minpressure_Updated.2014",
"Gender_MF", "Category", "alldeaths", "NDAM")])
print(correlation_matrix)
#4. (5 points) Using the correlation matrix created in question 3 from the 'hurricane.csv' file, generate a
#heatmap in which each cell represents the correlation coefficient values. What is the correlation
#coefficient value between 'MinPressure_before' and 'MinPressure_Updated_2014'?
heatmap(correlation_matrix,
Rowv = NA, Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none",
margins = c(5, 10))
correlation_value <- correlation_matrix["MinPressure_before","Minpressure_Updated.2014"]
print(correlation_value)
#The correleation coefficient value between the given variables is 0.98
closeAllConnections()
rm(list=ls())
wk6_Assign_Akhil <- file("wk6_Assign_Akhil.txt")
sink(wk6_Assign_Akhil,append = TRUE,type = "output")
cat(readChar(rstudioapi::getSourceEditorContext()$path,
file.info(rstudioapi::getSourceEditorContext()$path)$size))
# R package
list.of.packages <- c('ggplot2',"dplyr","maps","ggiraphExtra","plotly","dygraphs","foreign","readxl","xts","tibble","mapproj","corrplot")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) {
install.packages(new.packages, repo='http://cran.at.r-project.org',
dependencies=TRUE)
}
lapply(list.of.packages, library, character.only = TRUE)
#1. (5 points) Load the ggplot2 'mpg' dataset (i.e., ggplot2::mpg). Determine if there's a statistically
#significant difference in highway miles per gallon ('hwy') between two groups in the 'drv' column:
#front-wheel drive ('f') and rear-wheel drive ('r'). Explain your justification using a p-value.
mpg <- as.data.frame(ggplot2::mpg)
mpg_diff <- mpg %>%
filter(drv%in%c("f","r")) %>%
select(drv,hwy)
head(mpg_diff)
table(mpg_diff)
t.test(data = mpg_diff, hwy~drv, var.equal=T)
#A p-value of 1.529e-12, or less than 0.05,
#was obtained from the t-test comparing the highway miles per gallon (hwy) of front-wheel drive ('f')
#and rear-wheel drive ('r') automobiles. The null hypothesis, which contends that
#there is no difference in the two groups' highway miles per gallon, is strongly supported by the low p-value.
#2. (5 points) Load the ggplot2 'economics' dataset (i.e., ggplot2::economics) and determine the
#correlation between personal consumption expenditures (i.e., 'pce') and the personal saving rate (i.e.,
#'psavert'). Is it a positive correlation, negative correlation, or no correlation?
economics <- as.data.frame(ggplot2::economics)
cor.test(economics$pce,economics$psavert)
#It's a negative correlation with the value of -0.79 between two variables.
#3. (5 points) Download and Load the 'hurricane.csv' file from Blackboard. Create a correlation matrix
#with dimensions 7 x 7, considering variables from the dataset (i.e., MasFem, MinPressure_before,
#MinPressure_Updated_2014, Gender_MF, Category, alldeaths, NDAM). Print the correlation matrix.
hurricanes <- read.csv("hurricanes.csv")
head(hurricanes)
hurricanes_data <- hurricanes[,c("MasFem", "MinPressure_before","Minpressure_Updated.2014", "Gender_MF", "Category", "alldeaths", "NDAM")]
correlation_matrix <- cor(hurricanes_data[c("MasFem", "MinPressure_before", "Minpressure_Updated.2014",
"Gender_MF", "Category", "alldeaths", "NDAM")])
print(correlation_matrix)
#4. (5 points) Using the correlation matrix created in question 3 from the 'hurricane.csv' file, generate a
#heatmap in which each cell represents the correlation coefficient values. What is the correlation
#coefficient value between 'MinPressure_before' and 'MinPressure_Updated_2014'?
heatmap(correlation_matrix,
Rowv = NA, Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none",
margins = c(5, 10))
correlation_value <- correlation_matrix["MinPressure_before","Minpressure_Updated.2014"]
print(correlation_value)
#The correleation coefficient value between the given variables is 0.98
closeAllConnections()
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c('ggplot2',"dplyr","maps","ggiraphExtra","plotly","dygraphs","foreign","readxl","xts","tibble","mapproj","corrplot")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) {
install.packages(new.packages, repo='http://cran.at.r-project.org',
dependencies=TRUE)
}
lapply(list.of.packages, library, character.only = TRUE)
setwd("D:/EKU/SEM 1/Data Vizualization/DV Project")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(foreign)
library(dygraphs)
library(tidyverse)
library(readxl)
library(rstudioapi)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggiraphExtra)
library(maps)
library(knitr)
library(corrplot)
titanic <- read.csv("Titanic.csv")
head(titanic,5)
# Filter out missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
titanic <- read.csv("Titanic.csv")
head(titanic,5)
# Filter out missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Summary statistics of Survived column
summary(titanic$Survived)
# Bar plot of Survived column
ggplot(data = titanic, aes(x = factor(Survived))) +
geom_bar() +
labs(x = "Survived", y = "Count")
# Group by Sex and calculate survival rate
survival_by_sex <- titanic %>%
group_by(Sex) %>%
summarise(survival_rate = mean(Survived))
# Bar plot of survival rate by Sex
ggplot(data = survival_by_sex, aes(x = Sex, y = survival_rate)) +
geom_col() +
labs(x = "Sex", y = "Survival Rate")
# Group by Pclass and calculate survival rate
survival_by_class <- titanic %>%
group_by(Class) %>%
summarise(survival_rate = mean(Survived))
# Bar plot of survival rate by Pclass
ggplot(data = survival_by_class, aes(x = factor(Class), y = survival_rate)) +
geom_col() +
labs(x = "Class", y = "Survival Rate")
# Group by Age and calculate survival rate
survival_by_age <- titanic %>%
group_by(Age) %>%
summarise(survival_rate = mean(Survived))
# Line plot of survival rate by Age
ggplot(data = survival_by_age, aes(x = Age, y = survival_rate)) +
geom_line() +
labs(x = "Age", y = "Survival Rate")
# Scatter plot of Fare vs. Age colored by Survived
ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived")
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(foreign)
library(dygraphs)
library(tidyverse)
library(readxl)
library(rstudioapi)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggiraphExtra)
library(maps)
library(knitr)
library(corrplot)
head(mtcars)
car_cor <- cor(mtcars)
car_cor2 <- round(car_cor,2)
corrplot(car_cor)
corrplot(car_cor, method = "number")
col <- colorRampPalette(c("#BB4444","#EE9988","#FFFFFF","#77AADD","#4477AA"))
corrplot(car_cor,
method = "color",
col=col(200),
type="lower",
order = "hclust",
addCoef.col = "black",
tl.col = "black",
tl.srt = 45,
diag = F)
economics <- as.data.frame(economics)
eco <- xts(economics$unemploy, order.by = economics$date)
##
library(xts)
library(dygraphs)
economics <- as.data.frame(economics)
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco)
dygraph(eco) %>%
dyRangeSelector()
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
plotly_scatter <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
plotly_scatter <- ggplotly(plotly_scatter)
# Show interactive plot
plotly_scatter
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
intercative
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interact <- ggplotly(interact)
# Show interactive plot
intercative
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interact <- ggplotly(interact)
# Show interactive plot
intercat
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
interactive
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
scale_y_continuous(trans = "log10")+
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Load necessary libraries
library(plotly)
# Remove non-numeric values from Fare column
titanic <- titanic %>%
filter(!is.na(Fare) & is.numeric(Fare))
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
scale_y_continuous(trans = "log10")+
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
interactive
# Load necessary libraries
library(ggplot2)
library(plotly)
# Remove non-numeric values from Fare column
titanic <- titanic %>%
filter(!is.na(Fare) & is.numeric(Fare))
# Scatter plot of Fare vs. Age colored by Survived with logarithmic scale for Fare
plotly_scatter <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival") +
scale_y_continuous(trans = "log10")
# Convert ggplot to plotly
plotly_scatter <- ggplotly(plotly_scatter)
# Show interactive plot
plotly_scatter
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
interactive
# Show interactive plot
interactive
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
interactive
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(column_name) {
summary <- summarise(titanic,
Mean = mean(.data[[column_name]], na.rm = TRUE),
Median = median(.data[[column_name]], na.rm = TRUE),
Min = min(.data[[column_name]], na.rm = TRUE),
Max = max(.data[[column_name]], na.rm = TRUE),
SD = sd(.data[[column_name]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
statistics <- bind_rows(statistics, .id = "Column")
# Print statistical summary
print(statistics)
View(titanic)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
Mean = mean(.data[[survival_by_age]], na.rm = TRUE),
Median = median(.data[[survival_by_class]], na.rm = TRUE),
Min = min(.data[[survival_by_sex]], na.rm = TRUE),
Max = max(.data[[column_name]], na.rm = TRUE),
SD = sd(.data[[column_name]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
Mean = mean(.data[[Age]], na.rm = TRUE),
Median = median(.data[[Class]], na.rm = TRUE),
Min = min(.data[[Sex]], na.rm = TRUE),
Max = max(.data[[Fare]], na.rm = TRUE),
SD = sd(.data[[Dept]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
Mean = mean(.data[[titance$Age]], na.rm = TRUE),
Median = median(.data[[titance$Class]], na.rm = TRUE),
Min = min(.data[[titance$Sex]], na.rm = TRUE),
Max = max(.data[[titance$Fare]], na.rm = TRUE),
SD = sd(.data[[titance$Dept]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
Mean = mean(.data[[titanic$Age]], na.rm = TRUE),
Median = median(.data[[titanic$Class]], na.rm = TRUE),
Min = min(.data[[titanic$Sex]], na.rm = TRUE),
Max = max(.data[[titanic$Fare]], na.rm = TRUE),
SD = sd(.data[[titanic$Dept]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
#Mean = mean(.data[[titanic$Age]], na.rm = TRUE),
Median = median(.data[[titanic$Class]], na.rm = TRUE),
Min = min(.data[[titanic$Sex]], na.rm = TRUE),
Max = max(.data[[titanic$Fare]], na.rm = TRUE),
SD = sd(.data[[titanic$Dept]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load data
titanic <- read.csv("Titanic.csv")
# Remove missing values in the "Survived" column
titanic <- titanic %>% filter(!is.na(Survived))
# Function to calculate statistical summary for each column
calculate_summary <- function(Survived) {
summary <- summarise(titanic,
#Mean = mean(.data[[titanic$Age]], na.rm = TRUE),
#Median = median(.data[[titanic$Class]], na.rm = TRUE),
Min = min(.data[[titanic$Sex]], na.rm = TRUE),
Max = max(.data[[titanic$Fare]], na.rm = TRUE),
SD = sd(.data[[titanic$Dept]], na.rm = TRUE))
return(summary)
}
# Apply the function to all numeric columns
numeric_columns <- sapply(titanic, is.numeric)
numeric_columns <- names(numeric_columns[numeric_columns])
statistics <- lapply(numeric_columns, calculate_summary)
# Load necessary libraries
library(plotly)
# Scatter plot of Fare vs. Age colored by Survived
interact <- ggplot(data = titanic, aes(x = Age, y = Fare, color = factor(Survived))) +
geom_point() +
labs(x = "Age", y = "Fare", color = "Survived") +
ggtitle("Fare vs. Age Colored by Survival")
# Convert ggplot to plotly
interactive <- ggplotly(interact)
# Show interactive plot
interactive
